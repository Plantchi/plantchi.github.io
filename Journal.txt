For our project, we had to research heavily into websockets and what their functionality is used for.
Originally, we sought to use basic websockets module but decided socketIO was more modern and clean. 

We had to install:
socketIO
express

There was alot of initial setup and research involving Heroku deployment, and what deployment entailed. 

Sarah used lots of bootstrap to make frontend functionality clean and straightforward when desiging for 
different browsers. 
//maybe insert here how you made it tab-able (idk how to spell)

Kelsey struggled with figuring out if it made more sense for the socketIO to be in charge of all game
implementations. For example, should a client socket send a message to server that the "sun button" has been clicked.
Then the server would alter the values of current connections plant, and send a message back that it has been altered.
This seemed like alot of extra steps for no apparent benefit, so we decided adding script to the html responsible for game
play was alot easier. I think if I made a game again, I would like to try to design something that requires sockets
for every move made. 

I struggled with socketIO not allowing a socket connection to persist if client is rerouted. I had to 
change the design a bit so that the loading page is the waiting room, and once you choose a plant, that is where the 
socket and room spec is created inside that specific HTML. This took a while to solidify since I was originally creating a socket
in index.html and couldnt find a way to pass a socket instance with its ID. The socketIO docs are not very in depth. 

helpful sources for this project:

https://www.youtube.com/watch?v=vQjiN8Qgs3c&list=PL4cUxeGkcC9i4V-_ZVwLmOusj8YAUhj_9